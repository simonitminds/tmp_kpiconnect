version: 2

install_hex_rebar: &install_hex_rebar
  run:
    name: Install hex and rebar
    command: |
      mix local.hex --force
      mix local.rebar --force

jobs:
  build:
    docker:
      - image:  circleci/elixir:1.8.0-node-browsers
        environment:
          MIX_ENV: test
      - image: circleci/postgres:11.3-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
    resource_class: xlarge

    steps:
      - checkout
      - <<: *install_hex_rebar

      - run:
          name: "ELIXIR_VERSION.lock"
          command: echo "${ELIXIR_VERSION}"> ELIXIR_VERSION.lock

      - run:
          name: "OTP_VERSION.lock"
          command: echo "${OTP_VERSION}"> OTP_VERSION.lock

      - restore_cache:
          keys:
            - v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
            - v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}
      - run:
          name: Compile Oceanconnect
          command: mix do deps.get, compile
          working_directory: ~/project
      - run:
          name: Compile assets
          command: npm install && yarn build
          working_directory: ~/project/assets
      - run:
          name: phx.digest
          command: mix phx.digest
          working_directory: ~/project

      - save_cache:
          key: v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
          paths:
            - deps
            - _build
            - priv/static
      - save_cache:
          key: v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}
          paths:
            - deps
            - _build
            - priv/static

      - run:
         name: Start Chrome Driver
         command: /usr/local/bin/chromedriver
         background: true
      - run:
          name: Create Test Database
          command: mix do ecto.create, ecto.migrate
          working_directory: ~/project
      - run:  # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: mix test --trace  # run all tests in project
